async function h(){return new Promise(async(s,r)=>{try{if(!("NDEFReader"in window))return r(new Error("Web NFC API no disponible en este navegador"));const a=new window.NDEFReader,o=setTimeout(()=>{r(new Error("Tiempo de espera agotado. Acerque su documento al dispositivo."))},2e4);await a.scan(),a.addEventListener("reading",({message:t,serialNumber:e})=>{clearTimeout(o);const u=Array.from(t.records),i=new TextDecoder;let n={documentType:"UNKNOWN",documentNumber:"",names:"",surnames:"",success:!0,chipId:e};u.forEach(c=>{if(c.recordType==="text"){const d=i.decode(c.data);try{const m=JSON.parse(d);m.documentNumber&&(m.documentNumber.match(/^\d{1,2}\.\d{3}\.\d{3}-[\dkK]$/)?n.documentType="CI-CHL":m.documentNumber.match(/^[A-Z]{1,2}\d{6,7}$/)&&(n.documentType="PASS"),n={...n,...m})}catch{p(d,n)}}else if(c.recordType==="url"){const d=i.decode(c.data);if(d.includes("datos=")){const f=new URLSearchParams(d.split("?")[1]).get("datos");if(f)try{const l=JSON.parse(atob(f));n={...n,...l}}catch(l){console.warn("Error decodificando datos de URL:",l)}}}}),n.documentType==="UNKNOWN"&&n.documentNumber&&(n.documentNumber.match(/^\d{1,2}\.\d{3}\.\d{3}-[\dkK]$/)?n.documentType="CI-CHL":n.documentNumber.match(/^[A-Z]{1,2}\d{6,7}$/)&&(n.documentType="PASS")),n.success=!0,s(n)}),a.addEventListener("error",t=>{clearTimeout(o),r(new Error(`Error en la lectura NFC: ${t.message}`))})}catch(a){r(new Error(`Error al iniciar el escaneo NFC: ${a.message}`))}})}async function w(){return new Promise(async(s,r)=>{try{if(!("nfc"in navigator)||!("reading"in navigator.nfc))return r(new Error("API NFC alternativa no disponible"));const a=setTimeout(()=>{r(new Error("Tiempo de espera agotado. Acerque su documento al dispositivo."))},2e4);navigator.nfc.reading({tech:["NDEF","IsoDep"],options:{timeoutMillis:2e4,aidFilter:["A0000002471001"]}}).then(o=>{clearTimeout(a);const t={documentType:"UNKNOWN",documentNumber:"",names:"",surnames:"",success:!0,chipId:o.id};if(o.ndefMessages&&o.ndefMessages.length>0){const e=new TextDecoder;o.ndefMessages.forEach(u=>{u.records.forEach(i=>{if(i.recordType==="text"){const n=e.decode(i.data);try{const c=JSON.parse(n);c.documentNumber&&(c.documentNumber.match(/^\d{1,2}\.\d{3}\.\d{3}-[\dkK]$/)&&(t.documentType="CI-CHL"),Object.assign(t,c))}catch{p(n,t)}}})})}s(t)}).catch(o=>{clearTimeout(a),r(new Error(`Error en la lectura alternativa: ${o.message||"Error desconocido"}`))})}catch(a){r(new Error(`Error al iniciar la lectura alternativa: ${a.message}`))}})}async function E(){return new Promise((s,r)=>{try{if(!window.androidInterface||!window.androidInterface.readNFC)return r(new Error("Interfaz Android para NFC no disponible"));const a=setTimeout(()=>{r(new Error("Tiempo de espera agotado. Acerque su documento al dispositivo."))},2e4),o=t=>{clearTimeout(a);try{const e=JSON.parse(t);if(e.success){const u={documentType:N(e.documentNumber),documentNumber:e.documentNumber||"",names:e.names||e.givenNames||"",surnames:e.surnames||e.familyNames||"",fullName:e.fullName,birthDate:e.birthDate,nationality:e.nationality,gender:e.gender,issueDate:e.issueDate,expiryDate:e.expiryDate,personalNumber:e.personalNumber,chipId:e.chipId,faceImage:!!e.faceImage,fingerprints:!!e.fingerprints,success:!0};s(u)}else r(new Error(e.error||"Error desconocido en la lectura"))}catch(e){r(new Error(`Error al procesar la respuesta: ${e}`))}};if(window.androidInterface.readNFC.length>0){const t=`nfcCallback_${Date.now()}`;window[t]=o,window.androidInterface.readNFC(t),setTimeout(()=>{delete window[t]},25e3)}else{const t=window.androidInterface.readNFC();t&&typeof t.then=="function"?t.then(o).catch(e=>{clearTimeout(a),r(new Error(`Error en la interfaz Android: ${e.message||e}`))}):typeof t=="string"?o(t):r(new Error("Formato de respuesta no reconocido de la interfaz Android"))}}catch(a){r(new Error(`Error al acceder a la interfaz Android: ${a.message}`))}})}function p(s,r){const a=/(\d{1,2}\.\d{3}\.\d{3}-[\dkK])/,o=s.match(a);o&&(r.documentNumber=o[1],r.documentType="CI-CHL");const t=/NOMBRES[:\s]+([^,;\n]+)/i,e=s.match(t);e&&(r.names=e[1].trim());const u=/APELLIDOS[:\s]+([^,;\n]+)/i,i=s.match(u);i&&(r.surnames=i[1].trim());const n=/NACIMIENTO[:\s]+(\d{2}[-\/]\d{2}[-\/]\d{4})/i,c=s.match(n);if(c){const d=c[1].split(/[-\/]/);d.length===3&&(r.birthDate=`${d[2]}-${d[1]}-${d[0]}`)}}function N(s){return s?s.match(/^(\d{1,2}\.\d{3}\.\d{3}|\d{7,8})-[\dkK]$/)?"CI-CHL":s.match(/^[A-Z]{1,2}\d{6,7}$/)?"PASS":s.match(/^[A-Z0-9]{5,15}$/)?"CI-EXT":"UNKNOWN":"UNKNOWN"}export{w as readWithAlternativeNFC,E as readWithAndroidInterface,h as readWithWebNFC};
