import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Loader2, Languages } from "lucide-react";

interface TranslationWidgetProps {
  content: string;
  onTranslationComplete: (translatedContent: string) => void;
}

const TranslationWidget: React.FC<TranslationWidgetProps> = ({ 
  content, 
  onTranslationComplete 
}) => {
  const [isTranslating, setIsTranslating] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState<"es" | "en" | "pt" | string>("es");
  
  const handleTranslate = async (targetLanguage: string) => {
    // No traducir si el idioma seleccionado es el actual
    if (targetLanguage === currentLanguage) return;
    
    setIsTranslating(true);
    
    try {
      // Simulamos la traducción con un retraso
      // En producción, esto se conectaría a un servicio de traducción real
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Ejemplo simple de "traducción" para demostración
      let translatedContent = content;
      if (targetLanguage === "en") {
        // Reemplazos simples para simular traducción al inglés
        translatedContent = content
          .replace(/Documento/g, "Document")
          .replace(/Información/g, "Information")
          .replace(/Fecha/g, "Date")
          .replace(/Estado/g, "Status")
          .replace(/Firmado/g, "Signed")
          .replace(/Certificado/g, "Certified")
          .replace(/Generado por/g, "Generated by");
      } else if (targetLanguage === "pt") {
        // Reemplazos simples para simular traducción al portugués
        translatedContent = content
          .replace(/Documento/g, "Documento")
          .replace(/Información/g, "Informação")
          .replace(/Fecha/g, "Data")
          .replace(/Estado/g, "Estado")
          .replace(/Firmado/g, "Assinado")
          .replace(/Certificado/g, "Certificado")
          .replace(/Generado por/g, "Gerado por");
      }
      
      // Actualizar el estado
      setCurrentLanguage(targetLanguage);
      onTranslationComplete(translatedContent);
    } catch (error) {
      console.error("Error durante la traducción:", error);
    } finally {
      setIsTranslating(false);
    }
  };
  
  return (
    <div className="flex flex-wrap items-center gap-2">
      <span className="text-sm mr-2 flex items-center">
        <Languages className="h-4 w-4 mr-1" />
        Ver en:
      </span>
      
      <Button 
        variant={currentLanguage === "es" ? "default" : "outline"}
        size="sm"
        onClick={() => handleTranslate("es")}
        disabled={isTranslating || currentLanguage === "es"}
      >
        Español
      </Button>
      
      <Button 
        variant={currentLanguage === "en" ? "default" : "outline"}
        size="sm"
        onClick={() => handleTranslate("en")}
        disabled={isTranslating || currentLanguage === "en"}
      >
        {isTranslating && currentLanguage !== "en" ? (
          <Loader2 className="h-3 w-3 mr-1 animate-spin" />
        ) : null}
        English
      </Button>
      
      <Button 
        variant={currentLanguage === "pt" ? "default" : "outline"}
        size="sm"
        onClick={() => handleTranslate("pt")}
        disabled={isTranslating || currentLanguage === "pt"}
      >
        {isTranslating && currentLanguage !== "pt" ? (
          <Loader2 className="h-3 w-3 mr-1 animate-spin" />
        ) : null}
        Português
      </Button>
    </div>
  );
};

export default TranslationWidget;